name: Run Success Scenarios
on: [workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/959426188245/locations/global/workloadIdentityPools/github-action-pool-1/providers/github-action-provider-1'
          service_account: 'artifact-repository-access@roomr-222721.iam.gserviceaccount.com'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.0
      
      - name: Terraform Init
        id: init
        run: terraform init    
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var="project_id"=roomr-222721 -var="db_pass"=root
        continue-on-error: true
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="project_id"=roomr-222721 -var="db_pass"=root
      
      - name: Sleep for 30 seconds to allow VM to boot container
        run: sleep 30s
        shell: bash

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Alembic
        run: |
          alembic revision --autogenerate
          alembic upgrade head

      - name: Configure Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev
          docker build -t sneyd321/tenant-service .
          docker compose up
          
      - name: Test with pytest
        run: |
          pytest tests/test_repository.py
